/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/signup": {
    /** User Sign-Up */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SignUpCredential"];
        };
      };
      responses: {
        /** @description User created successfully */
        201: {
          content: never;
        };
        400: components["responses"]["BadRequest"];
        409: components["responses"]["ConflictError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/login": {
    /** User Login */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginCredential"];
        };
      };
      responses: {
        /** @description User logged in successfully */
        200: {
          content: {
            "application/json": {
              /** @description JWT token for authentication */
              token?: string;
            };
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["AuthenticationError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/notes": {
    /** Get all notes */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Note"][];
          };
        };
        401: components["responses"]["AuthenticationError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /** Create a new note */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewNote"];
        };
      };
      responses: {
        /** @description Note created successfully */
        201: {
          content: {
            "application/json": components["schemas"]["Note"];
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["AuthenticationError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/notes/{id}": {
    /** Retrieve a note by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the note to retrieve */
          id: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["Note"];
          };
        };
        401: components["responses"]["AuthenticationError"];
        404: components["responses"]["ResourceNotFoundError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /** Update a note */
    put: {
      parameters: {
        path: {
          /** @description ID of the note to update */
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateNote"];
        };
      };
      responses: {
        /** @description Note updated successfully */
        200: {
          content: {
            "application/json": components["schemas"]["Note"];
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["AuthenticationError"];
        404: components["responses"]["ResourceNotFoundError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /** Delete a note */
    delete: {
      parameters: {
        path: {
          /** @description ID of the note to delete */
          id: string;
        };
      };
      responses: {
        /** @description Note deleted successfully */
        204: {
          content: never;
        };
        401: components["responses"]["AuthenticationError"];
        404: components["responses"]["ResourceNotFoundError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/notes/{id}/complete": {
    /** Mark a note as complete */
    post: {
      parameters: {
        path: {
          /** @description ID of the note to mark as complete */
          id: string;
        };
      };
      responses: {
        /** @description Note marked as complete successfully */
        200: {
          content: {
            "application/json": {
              /** @description Indicates whether the note is completed or not */
              completed: string;
            };
          };
        };
        401: components["responses"]["AuthenticationError"];
        404: components["responses"]["ResourceNotFoundError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/notes/{id}/unComplete": {
    /** Mark a note as incomplete */
    post: {
      parameters: {
        path: {
          /** @description ID of the note to mark as incomplete */
          id: string;
        };
      };
      responses: {
        /** @description Note marked as incomplete successfully */
        200: {
          content: {
            "application/json": {
              /** @description Indicates whether the note is completed or not */
              cancel_complete: string;
            };
          };
        };
      };
    };
  };
  "/users": {
    /** Get rows users */
    get: {
      parameters: {
        query?: {
          name?: string;
          role?: string;
          sortBy?: string;
          projectBy?: string;
          limit?: number;
          page?: number;
        };
      };
      responses: {
        /** @description success get users */
        200: {
          content: {
            "application/json": components["schemas"]["User"][];
          };
        };
        401: components["responses"]["AuthenticationError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /** Create a new user */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewUser"];
        };
      };
      responses: {
        /** @description User created successfully */
        201: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        400: components["responses"]["BadRequest"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/users/{id}": {
    /** Retrieve a user by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the user to retrieve */
          userId: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        404: components["responses"]["ResourceNotFoundError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /** Update a user */
    put: {
      parameters: {
        path: {
          /** @description ID of the user to update */
          userId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateUser"];
        };
      };
      responses: {
        /** @description User updated successfully */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        400: components["responses"]["BadRequest"];
        404: components["responses"]["ResourceNotFoundError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /**
     * Delete a user
     * @description Deletes the user identified by the userId parameter.
     */
    delete: {
      parameters: {
        path: {
          /** @description ID of the user to delete */
          userId: string;
        };
      };
      responses: {
        /** @description User deleted successfully */
        204: {
          content: never;
        };
        404: components["responses"]["ResourceNotFoundError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SignUpCredential: {
      /**
       * Format: email
       * @description Email address of the user
       * @example john@example.com
       */
      email: string;
      /**
       * @description Password of the user
       * @example Test-$1234
       */
      password: string;
    };
    LoginCredential: {
      /**
       * Format: email
       * @description Email address of the user
       * @example john@example.com
       */
      email: string;
      /**
       * @description Password of the user
       * @example Test-$1234
       */
      password: string;
    };
    Note: {
      /**
       * Format: objectId
       * @description Unique identifier for the note
       * @example 507f191e810c19729de860ea
       */
      id: string;
      /**
       * @description ID of the user who owns the note
       * @example 507f191e810c19729de860ea
       */
      userId: string;
      /**
       * @description Content of the note
       * @example Create app with Docker and docker-compose
       */
      content: string;
      /**
       * @description Indicates whether the note is completed
       * @example true
       */
      completed: boolean;
    };
    NewNote: {
      /** @description Content of the new note */
      content: string;
    };
    UpdateNote: {
      /** @description New content of the note */
      content?: string;
      /** @description New completion status of the note */
      completed?: boolean;
    };
    NewUser: {
      /**
       * @description Name of the user
       * @example John Due
       */
      name: string;
      /**
       * Format: email
       * @description Email address of the user
       * @example john@example.com
       */
      email: string;
      /**
       * @description Password of the user
       * @example Test-$$123
       */
      password: string;
    };
    UpdateUser: {
      /**
       * @description New name of the user
       * @example John Due
       */
      name?: string;
      /**
       * @description New password of the user
       * @example Test-$$123
       */
      password?: string;
    };
    User: {
      /**
       * Format: objectId
       * @description Unique identifier for the user
       * @example 507f191e810c19729de860ea
       */
      id: string;
      /**
       * @description Name of the user
       * @example John Due
       */
      name: string;
      /**
       * Format: email
       * @description Email address of the user
       * @example john@example.com
       */
      email: string;
      /**
       * @description User role
       * @example User
       */
      role: string;
      /**
       * @description User email verified status!
       * @example true
       */
      isEmailVerified: boolean;
    };
    BaseError: {
      /** @example The HTTP status message */
      error: string;
      /** @example The ERROR message */
      message: string;
    };
    DetailsError: {
      /** @example fieldName */
      field: string;
      /** @example This field already exist!. */
      message?: string;
    };
  };
  responses: {
    /** @description Bad request error */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["BaseError"] & {
          data: components["schemas"]["DetailsError"][];
        };
      };
    };
    /** @description Authentication failed error */
    AuthenticationError: {
      content: {
        "application/json": components["schemas"]["BaseError"];
      };
    };
    /** @description Authorization error */
    AuthorizationError: {
      content: {
        "application/json": components["schemas"]["BaseError"];
      };
    };
    /** @description Conflict Error */
    ConflictError: {
      content: {
        "application/json": components["schemas"]["BaseError"] & {
          data: components["schemas"]["DetailsError"][];
        };
      };
    };
    /** @description Resource not found error */
    ResourceNotFoundError: {
      content: {
        "application/json": components["schemas"]["BaseError"] & Record<string, never>;
      };
    };
    /** @description Internal server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["BaseError"];
      };
    };
    /** @description Rate limit exceeded error */
    RateLimitExceededError: {
      content: {
        "application/json": components["schemas"]["BaseError"] & Record<string, never>;
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
