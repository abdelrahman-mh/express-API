/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User Sign-Up */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SignUpCredential"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                409: components["responses"]["ConflictError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User Login */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginCredential"];
                };
            };
            responses: {
                /** @description User logged in successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description JWT token for authentication */
                            token?: string;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["AuthenticationError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all notes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Note"][];
                    };
                };
                401: components["responses"]["AuthenticationError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /** Create a new note */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["NewNote"];
                };
            };
            responses: {
                /** @description Note created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Note"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["AuthenticationError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a note by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the note to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Note"];
                    };
                };
                401: components["responses"]["AuthenticationError"];
                404: components["responses"]["ResourceNotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /** Update a note */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the note to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateNote"];
                };
            };
            responses: {
                /** @description Note updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Note"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["AuthenticationError"];
                404: components["responses"]["ResourceNotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /** Delete a note */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the note to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Note deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["AuthenticationError"];
                404: components["responses"]["ResourceNotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a note as complete */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the note to mark as complete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Note marked as complete successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates whether the note is completed or not */
                            completed: string;
                        };
                    };
                };
                401: components["responses"]["AuthenticationError"];
                404: components["responses"]["ResourceNotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}/unComplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a note as incomplete */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the note to mark as incomplete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Note marked as incomplete successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates whether the note is completed or not */
                            cancel_complete: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get rows users */
        get: {
            parameters: {
                query?: {
                    name?: string;
                    role?: string;
                    sortBy?: string;
                    projectBy?: string;
                    limit?: number;
                    page?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description success get users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"][];
                    };
                };
                401: components["responses"]["AuthenticationError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /** Create a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["NewUser"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a user by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the user to retrieve */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                404: components["responses"]["ResourceNotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /** Update a user */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the user to update */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUser"];
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["ResourceNotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /**
         * Delete a user
         * @description Deletes the user identified by the userId parameter.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the user to delete */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["ResourceNotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignUpCredential: {
            /**
             * Format: email
             * @description Email address of the user
             * @example john@example.com
             */
            email: string;
            /**
             * @description Password of the user
             * @example Test-$1234
             */
            password: string;
        };
        LoginCredential: {
            /**
             * Format: email
             * @description Email address of the user
             * @example john@example.com
             */
            email: string;
            /**
             * @description Password of the user
             * @example Test-$1234
             */
            password: string;
        };
        Note: {
            /**
             * Format: objectId
             * @description Unique identifier for the note
             * @example 507f191e810c19729de860ea
             */
            id: string;
            /**
             * @description ID of the user who owns the note
             * @example 507f191e810c19729de860ea
             */
            userId: Record<string, never>;
            /**
             * @description Content of the note
             * @example Create app with Docker and docker-compose
             */
            content: string;
            /**
             * @description Indicates whether the note is completed
             * @example true
             */
            completed: boolean;
            /**
             * Format: date-time
             * @description Date and time when the note was created
             * @example 2022-04-05T10:15:30Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date and time when the note was last updated
             * @example 2022-04-05T10:15:30Z
             */
            updatedAt: string;
        };
        NewNote: {
            /** @description Content of the new note */
            content: string;
        };
        UpdateNote: {
            /** @description New content of the note */
            content?: string;
            /** @description New completion status of the note */
            completed?: boolean;
        };
        NewUser: {
            /**
             * @description Name of the user
             * @example John Due
             */
            name: string;
            /**
             * Format: email
             * @description Email address of the user
             * @example john@example.com
             */
            email: string;
            /**
             * @description Password of the user
             * @example Test-$$123
             */
            password: string;
        };
        UpdateUser: {
            /**
             * @description New name of the user
             * @example John Due
             */
            name?: string;
            /**
             * @description New password of the user
             * @example Test-$$123
             */
            password?: string;
        };
        User: {
            /**
             * Format: objectId
             * @description Unique identifier for the user
             * @example 507f191e810c19729de860ea
             */
            id: string;
            /**
             * @description Name of the user
             * @example John Due
             */
            name: string;
            /**
             * Format: email
             * @description Email address of the user
             * @example john@example.com
             */
            email: string;
            /**
             * Format: date-time
             * @description Date and time when the user was created
             * @example 2022-04-05T10:15:30Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date and time when the user was last updated
             * @example 2022-04-05T10:15:30Z
             */
            updatedAt: string;
        };
        BaseError: {
            /** @example The HTTP status message */
            error: string;
            /** @example The ERROR message */
            message: string;
        };
        DetailsError: {
            /** @example fieldName */
            field: string;
            /** @example This field already exist!. */
            message?: string;
        };
    };
    responses: {
        /** @description Bad request error */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BaseError"] & {
                    data: components["schemas"]["DetailsError"][];
                };
            };
        };
        /** @description Authentication failed error */
        AuthenticationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BaseError"];
            };
        };
        /** @description Authorization error */
        AuthorizationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BaseError"];
            };
        };
        /** @description Conflict Error */
        ConflictError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BaseError"] & {
                    data: components["schemas"]["DetailsError"][];
                };
            };
        };
        /** @description Resource not found error */
        ResourceNotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BaseError"] & Record<string, never>;
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BaseError"];
            };
        };
        /** @description Rate limit exceeded error */
        RateLimitExceededError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BaseError"] & Record<string, never>;
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
